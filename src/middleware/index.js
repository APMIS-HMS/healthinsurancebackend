//-------------USSD API START-------------------

const user_verification = require('../middleware/user_verification');

//-------------USSD API END---------------------
const title = require('../middleware/title');
const country = require('../middleware/country');
const gender = require('../middleware/gender');
const beneficiary = require('../middleware/beneficiary');
const hia = require('../middleware/hia');
const hia_plans = require('../middleware/hia_plans');
const compare_password = require('../middleware/compare_password');
const hia_premiums = require('../middleware/hia_premiums');
const beneficiary_api = require('../middleware/beneficiary_api');
const create_beneficiary_api = require('../middleware/create_beneficiary_api');
const provider = require('../middleware/provider');
const claims_payment = require('../middleware/claims-payment');
const claims_payment_pay = require('../middleware/claims-payment-pay');
const sendSMS = require('../middleware/send-sms');
const validateAge = require('../middleware/validate-age-greater-than-eighteen');
const searchPolicy = require('../middleware/seach-policy');
const paymentVerification = require('../middleware/payment-verification');
const premiumCashPayment = require('../middleware/premium-policy-payment');
const get_beneficiary_count = require('../middleware/get-beneficiary-count');
const africa_ussd = require('../middleware/africa-ussd');
var multer = require('multer');
const handler = require('feathers-errors/handler');
const logger = require('../hooks/logger');
const fs = require('fs');
var mongoose = require('mongoose');
var Thumbnail = require('thumbnail');
const express = require('express');


const excelToJson = require('convert-excel-to-json');
const uploadexcel = require('../helpers/upload-excel');

const UssdMenu = require('ussd-menu-builder');
let menu = new UssdMenu();

module.exports = function () {
    const app = this;
    var storage = multer.diskStorage({
        destination: function (req, file, callback) {
            callback(null, './public/uploads/image');
        },
        filename: function (req, file, callback) {
            let name = req.body.filename;
            var autoGeneratedFileName = "";
            if (name == "0" || name === undefined) {
                autoGeneratedFileName = mongoose.Types.ObjectId() + ".jpg";
            } else {
                let originalName = name.split('.')[0] + '.jpg';
                autoGeneratedFileName = originalName;
            }
            callback(null, autoGeneratedFileName);
        },
    });

    var uploadProfileImgs = multer({
        storage: storage
    }).any();
    var thumbnail = new Thumbnail('./public/uploads/image', './public/uploads/thumbnails');

    function processFile(file) {
        let originalFileName = file.filename.split('.')[0] + '-100.jpg';
        file.thumbnail = '/uploads/thumbnails/' + originalFileName;
        var thumbnail = new Thumbnail('./public/uploads/image', './public/uploads/thumbnails');

        thumbnail.ensureThumbnail(file.filename, 100, null, function (err, filename, retVal) {
            const fs = require('fs');
            fs.unlink('./public/uploads/image/' + file.filename, function (err) {
                if (err) return console.log(err);
            });
        });
        return file;
    }

    app.post('/upload-file', function (req, res) {
        uploadProfileImgs(req, res, function (err) {
            if (err) {
                return err;
            }
            var pattern = /\\/ig;
            res.json(req.files.map(file => {
                file.path = file.path.replace(pattern, '/');
                console.log(processFile(file));
                return {
                    file: processFile(file)
                }
            }));
        });
    });


    app.post('/lashma-beneficiaries', beneficiary(app));
    app.put('/lashma-beneficiaries', beneficiary(app));
    app.post('/queue-claims-payment', claims_payment(app));
    app.post('/pay-queued-claims', claims_payment_pay(app));
    app.post('/payment-verification', paymentVerification(app));
    app.post('/premium-cash-payment', premiumCashPayment(app));

    app.get('/api/titles', title(app));
    app.get('/api/genders', gender(app));
    app.get('/api/countries', country(app));
    app.get('/api/hias', hia(app));
    app.get('/api/providers', provider(app));
    app.get('/api/hia-plans', hia_plans(app));
    app.get('/api/hia-premiums', hia_premiums(app));
    app.get('/api/beneficiaries', beneficiary_api(app));
    app.post('/api/beneficiaries', create_beneficiary_api(app));
    app.post('/api/send-sms', sendSMS(app));
    app.get('/api/validate-age', validateAge(app));
    app.get('/api/search-policy', searchPolicy(app));
    app.get('/api/compare-password', compare_password(app));
    app.get('/api/get-beneficiary-count', get_beneficiary_count(app));
    // app.post('/api/africa-ussd', africa_ussd(app));

    //-------------USSD API PLUG START-------------------
    app.get('/api/ussd/verify-user', user_verification(app));
    //-------------USSD API PLUG END-------------------
    app.post('/upload-excel', function (req, res) {
        var exceltojson;
        uploadexcel.data.upload(req, res, function (err) {

            if (err) {
                console.log(err);
                res.json({
                    error_code: 1,
                    err_desc: err
                });
                return;
            }

            /** Multer gives us file info in req.file object */
            if (!req.file) {
                console.log('no file');
                res.json({
                    error_code: 1,
                    err_desc: "No file passed"
                });
                return;
            }
            try {

                const result = excelToJson({
                    sourceFile: req.file.path,
                    outputJSON: false
                });

                //res.send(result);
                let bodyObj = []
                let enrolleeList = [];
                let principal = {};
                let beneficiaries = [];
                let policy = {};
                //console.log(result);
                if (result.Sheet1 !== undefined) {
                    console.log(result);
                    return result.Sheet1.forEach(function (item, index) {
                        if (index > 0) {
                            if (item.A != undefined && item.B != undefined && item.C != undefined &&
                                item.D != undefined && item.E != undefined && item.F != undefined && item.G != undefined &&
                                item.H != undefined && item.I != undefined &&
                                item.J != undefined && item.K != undefined && item.L != undefined && item.M != undefined &&
                                item.N != undefined && item.O != undefined && item.P != undefined && item.P != undefined &&
                                item.Q != undefined && item.AL != undefined && item.AM != undefined &&
                                item.AL != undefined && item.AM != undefined && item.AN != undefined && item.AO != undefined) {
                                console.log('A');
                                beneficiaries = [];
                                principal = {
                                    'dateOfBirth': new Date((item.A).toString()),
                                    'email': item.B,
                                    'gender': item.C,
                                    'homeAddress': {
                                        'neighbourhood': item.D,
                                        'state': item.E,
                                        'lga': item.F,
                                        'street': item.G
                                    },
                                    'lastName': item.H,
                                    'firstName': item.I,
                                    'lgaOfOrigin': item.J,
                                    'maritalStatus': item.K,
                                    'mothersMaidenName': item.L,
                                    'otherNames': item.M,
                                    'phoneNumber': item.N,
                                    'platformOwner': item.O,
                                    'stateOfOrigin': item.P,
                                    'title': item.Q
                                };
                                policy = {
                                    'premiumCategory': item.AI,
                                    'premiumPackage': item.AJ,
                                    'sponsorship': item.AK,
                                    'hia': item.AL,
                                    'facilityType': item.AM,
                                    'planType': item.AN,
                                    'plan': item.AO

                                };
                            }
                            console.log(policy);
                            if (item.S != undefined && item.T != undefined && item.U != undefined && item.V != undefined && item.W != undefined &&
                                item.X != undefined && item.Y != undefined && item.Z != undefined && item.AA != undefined && item.AB != undefined &&
                                item.AC != undefined && item.AD != undefined && item.AE != undefined && item.AF != undefined && item.AG != undefined) {
                                beneficiaries.push({
                                    'dateOfBirth': new Date((item.R).toString()),
                                    'email': item.S,
                                    'gender': item.T,
                                    'lastName': item.U,
                                    'firstName': item.V,
                                    'lgaOfOrigin': item.W,
                                    'maritalStatus': item.X,
                                    'mothersMaidenName': item.Y,
                                    'otherNames': item.Z,
                                    'phoneNumber': item.AA,
                                    'stateOfOrigin': item.AB,
                                    'relationship': item.AC,
                                    'title': item.AD,
                                    'homeAddress': {
                                        'neighbourhood': item.AE,
                                        'state': item.AF,
                                        'lga': item.AG,
                                        'street': item.AH
                                    }
                                });
                                console.log('B');
                            }
                            let counter = index + 1;
                            if (result.Sheet1.length == index + 1) {
                                //console.log('c');
                                //console.log(principal);
                                bodyObj.push({
                                    'principal': principal,
                                    'dependent': beneficiaries,
                                    'policy': policy
                                });
                                console.log(bodyObj);
                                res.send(bodyObj);
                            } else {
                                try {
                                    if (result.Sheet1[counter].A != undefined &&
                                        result.Sheet1[counter].B != undefined &&
                                        result.Sheet1[counter].C != undefined &&
                                        result.Sheet1[counter].D != undefined &&
                                        result.Sheet1[counter].I != undefined &&
                                        result.Sheet1[counter].J != undefined) {
                                        bodyObj.push({
                                            'principal': principal,
                                            'dependent': beneficiaries,
                                            'policy': policy
                                        });
                                    }
                                } catch (Exception) {

                                }
                            }
                        }
                    });
                }


                // res.json({
                //     error_code: 0,
                //     err_desc: null,
                //     data: result
                // });

                // console.log(res);
                // res.send(res);

            } catch (e) {
                res.json({
                    error_code: 1,
                    err_desc: "Corupted excel file"
                });
            }
        });
    });


    menu.startState({
        run: () => {
            // use menu.con() to send response without terminating session      
            menu.con('Welcome. Choose option:' +
                '\n1. Show Balance' +
                '\n2. Buy Airtime');
        },
        // next object links to next state based on user input
        next: {
            '1': 'showBalance',
            '2': 'buyAirtime'
        }
    });

    menu.state('showBalance', {
        run: () => {
            // fetch balance
            fetchBalance(menu.args.phoneNumber).then(function (bal) {
                // use menu.end() to send response and terminate session
                menu.end('Your balance is KES ' + bal);
            });
        }
    });

    menu.state('buyAirtime', {
        run: () => {
            menu.con('Enter amount:');
        },
        next: {
            // using regex to match user input to next state
            '*\\d+': 'buyAirtime.amount'
        }
    });

    // nesting states
    menu.state('buyAirtime.amount', {
        run: () => {
            // use menu.val to access user input value
            var amount = Number(menu.val);
            buyAirtime(menu.args.phoneNumber, amount).then(function (res) {
                menu.end('Airtime bought successfully.');
            });
        }
    });

    // app.post('/africa-ussd', function(req, res){
    //     menu.run(req.body, ussdResult => {
    //         res.send(ussdResult);
    //     });
    // });


    app.post('/africa-ussd', app => {
        console.log('wow');
        // console.log(menu)
        // let args = {
        //     phoneNumber: req.body.phoneNumber,
        //     sessionId: req.body.sessionId,
        //     serviceCode: req.body.serviceCode,
        //     text: req.body.text
        // };
        // menu.run(args, resMsg => {
        //     res.send(resMsg);
        // });


       return function(req, res,next){
        var message = '';
        
                var sessionId = req.body.sessionId;
                var serviceCode = req.body.serviceCode;
                var phoneNumber = req.body.phoneNumber;
                var text = req.body.text;
        
                console.log(sessionId, serviceCode, phoneNumber, text);
        
                var length = text.split('*').length;
                var txt = text.split('*');
        
                if (text === '') {
                    message = 'CON Welcome to APMIS Health Insurance \n';
                    message += '1: Verify Registration \n';
                    message += '2: Register\n';
                    message += '3: Get Policy\n';
                    message += '4: Pay Premium';
                }
        
                // add device
                else if (text === '1') {
                    // check if user is agent
                    console.log('am here');
                    message = 'CON Enter Policy ID';
        
                }
                else if (length === 2 && txt[0] === '1') {
        
        
                    promise.push(hook.app.service("policies")
                        .find({ query: { policyId: txt[1].toString() } }));
                    return Promise.all(promise).then(payload2 => {
                        console.log('fine')
                        message = 'END Policy checked';
                        var options = text.split('*');
                    }).catch(err => {
                        console.log('error')
                        message = 'END Policy error';
                        var options = text.split('*');
                    })
        
        
        
        
        
                }
                else if (length === 3 && txt[0] === '1') {
                    message = 'CON Enter device model\n';
                    message += 'eg. Nokia 3310';
                }
                else if (length === 4 && txt[0] === '1') {
                    message = 'CON Enter Warranty status\n';
                    message += '1) Yes / 2) No';
                }
                else if (length === 5 && txt[0] === '1') {
                    message = 'CON Enter Insurance status\n';
                    message += '1). Yes / 2). No';
                }
                else if (length === 6 && txt[0] === '1') {
                    message = 'CON Is device in stock\n';
                    message += '1). Yes / 2). No';
                }
                else if (length === 7 && txt[0] === '1') {
                    // commit to db
                    message = 'END Device registered';
                    var options = text.split('*');
        
                }
        
                // add sales person
                else if (text === '2') {
                    // check is user is agent
                    message = 'CON Enter sales agent name\n';
                }
                else if (length === 2 && txt[0] === '2') {
                    message = 'CON Enter sales agent email';
                }
                else if (length === 3 && txt[0] === '2') {
                    message = 'CON Enter Agent sales code';
                }
                else if (length === 4 && txt[0] === '2') {
                    message = 'CON Enter agent location\n';
                    message += 'eg. Kilimani';
                }
                else if (length === 5 && txt[0] === '2') {
                    message = 'END Sales agent added';
                    var options = text.split('*');
        
                }
        
        
                else if (text === '3') {
                    message = 'CON Enter device IMEI number';
                }
                else if (length === 2 && txt[0] === '3') {
                    message = 'CON Enter your ID number';
                }
                else if (length === 3 && txt[0] === '3') {
                    // check device authenticity
                    var options = text.split('*');
        
                    message = 'END You do not have a genuine device';
                }
        
        
                else if (text === '4') {
                    message = 'CON Enter Sales code';
                }
                else if (length === 2 && txt[0] === '4') {
                    message = 'CON Enter Phone IMEI number';
                }
                else if (length === 3 && txt[0] === '4') {
                    message = 'CON Enter Buyer ID number';
                }
                else if (length === 4 && txt[0] === '4') {
                    message = 'CON Enter Buyer Name';
                }
                else if (length === 5 && txt[0] === '4') {
                    message = 'CON Enter Buyer Phone number';
                }
                else if (length === 6 && txt[0] === '4') {
                    message = 'END Device sold';
                    var options = text.split('*');
                }
                else {
                    message = 'END Wrong input';
                    // reply with menu
                }
                res.contentType('text/plain');
                // res.send(message, 200);
                res.status(200).send(message)
       }
    })
    //app.use('/download-excel', express.static(path.join(__dirname, 'public')))

};